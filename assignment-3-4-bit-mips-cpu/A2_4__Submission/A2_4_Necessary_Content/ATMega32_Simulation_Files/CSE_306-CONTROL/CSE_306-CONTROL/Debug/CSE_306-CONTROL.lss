
CSE_306-CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000000ce  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000649  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a8  00000000  00000000  00000839  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024c  00000000  00000000  00000de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e8  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
int main(void)
{
	// Some pins of PORTC can not be used for I/O directly.
	// turn of JTAG to use them
	// o write a 1 to the JTD bit twice consecutively to turn it off
	MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  82:	80 e8       	ldi	r24, 0x80	; 128
  84:	84 bf       	out	0x34, r24	; 52
  86:	84 bf       	out	0x34, r24	; 52
	
    DDRA = 0xF0; // A[3:0] - Opcode Input
  88:	80 ef       	ldi	r24, 0xF0	; 240
  8a:	8a bb       	out	0x1a, r24	; 26
	
	// Control Unit Bits : C[3:0]B[7:0]
	// C[reg_dst[1], alu_src[1], mem_to_reg[1], reg_write[1]] B[mem_read[1], mem_write[1], branch[1], branch_neq[1], jump[1], alu_op[3]]
	DDRB = 0xFF;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
  90:	84 bb       	out	0x14, r24	; 20
	
	uint8_t opcode = ~0;
  92:	4f ef       	ldi	r20, 0xFF	; 255
	
    while (1) 
    {
		if (opcode != (0x0F & PINA)) {
  94:	24 2f       	mov	r18, r20
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	89 b3       	in	r24, 0x19	; 25
  9a:	8f 70       	andi	r24, 0x0F	; 15
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	28 17       	cp	r18, r24
  a0:	39 07       	cpc	r19, r25
  a2:	c1 f3       	breq	.-16     	; 0x94 <main+0x12>
			opcode = (0x0F & PINA);
  a4:	49 b3       	in	r20, 0x19	; 25
  a6:	4f 70       	andi	r20, 0x0F	; 15
			PORTB = CONTROL_ROM[opcode];
  a8:	e4 2f       	mov	r30, r20
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	ee 0f       	add	r30, r30
  ae:	ff 1f       	adc	r31, r31
  b0:	e0 5a       	subi	r30, 0xA0	; 160
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	80 81       	ld	r24, Z
  b6:	88 bb       	out	0x18, r24	; 24
			PORTC = (CONTROL_ROM[opcode] >> 8);
  b8:	81 81       	ldd	r24, Z+1	; 0x01
  ba:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	83 ed       	ldi	r24, 0xD3	; 211
  be:	90 e3       	ldi	r25, 0x30	; 48
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x3e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x44>
  c6:	00 00       	nop
  c8:	e5 cf       	rjmp	.-54     	; 0x94 <main+0x12>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
