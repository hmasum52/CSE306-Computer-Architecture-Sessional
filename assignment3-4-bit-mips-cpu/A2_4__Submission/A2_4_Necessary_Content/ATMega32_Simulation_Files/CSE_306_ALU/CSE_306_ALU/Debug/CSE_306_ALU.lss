
CSE_306_ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a6  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000524  00000000  00000000  00000772  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024f  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037d  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000115  00000000  00000000  00001289  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000139e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{
    // Some pins of PORTC can not be used for I/O directly.
    // turn of JTAG to use them
    // o write a 1 to the JTD bit twice consecutively to turn it off
    MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  6c:	80 e8       	ldi	r24, 0x80	; 128
  6e:	84 bf       	out	0x34, r24	; 52
  70:	84 bf       	out	0x34, r24	; 52

	DDRA = 0x00;				// A[3:0], B[7:4]
  72:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xF8;				// ALUOp B[2:0]
  74:	88 ef       	ldi	r24, 0xF8	; 248
  76:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x8f;				// D[7] - Zero Flag | D[3:0] - Output
  78:	8f e8       	ldi	r24, 0x8F	; 143
  7a:	81 bb       	out	0x11, r24	; 17
	uint8_t control_bits;
	uint8_t in1, in2, out;

	while (1)
	{
		control_bits = PINB & 0x07;
  7c:	96 b3       	in	r25, 0x16	; 22
  7e:	97 70       	andi	r25, 0x07	; 7

		in1 = PINA & 0x0f;
  80:	89 b3       	in	r24, 0x19	; 25
  82:	8f 70       	andi	r24, 0x0F	; 15
		in2 = (PINA & 0xf0) >> 4;
  84:	29 b3       	in	r18, 0x19	; 25
  86:	42 2f       	mov	r20, r18
  88:	42 95       	swap	r20
  8a:	4f 70       	andi	r20, 0x0F	; 15
		out = 0;

		if(control_bits == 0) {
  8c:	91 11       	cpse	r25, r1
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x28>
			out = in1 + in2;
  90:	84 0f       	add	r24, r20
  92:	24 c0       	rjmp	.+72     	; 0xdc <main+0x70>
		} else if(control_bits == 1){
  94:	91 30       	cpi	r25, 0x01	; 1
  96:	11 f4       	brne	.+4      	; 0x9c <main+0x30>
			out = in1 - in2;
  98:	84 1b       	sub	r24, r20
  9a:	20 c0       	rjmp	.+64     	; 0xdc <main+0x70>
		} else if(control_bits == 2) {
  9c:	92 30       	cpi	r25, 0x02	; 2
  9e:	11 f4       	brne	.+4      	; 0xa4 <main+0x38>
			out = in1 & in2;
  a0:	84 23       	and	r24, r20
  a2:	1c c0       	rjmp	.+56     	; 0xdc <main+0x70>
		} else if(control_bits == 3) {
  a4:	93 30       	cpi	r25, 0x03	; 3
  a6:	11 f4       	brne	.+4      	; 0xac <main+0x40>
			out = in1 | in2;
  a8:	84 2b       	or	r24, r20
  aa:	18 c0       	rjmp	.+48     	; 0xdc <main+0x70>
		} else if(control_bits == 4) {
  ac:	94 30       	cpi	r25, 0x04	; 4
  ae:	19 f4       	brne	.+6      	; 0xb6 <main+0x4a>
			out = ~(in1 | in2);
  b0:	84 2b       	or	r24, r20
  b2:	80 95       	com	r24
  b4:	13 c0       	rjmp	.+38     	; 0xdc <main+0x70>
		} else if(control_bits == 5) {
  b6:	95 30       	cpi	r25, 0x05	; 5
  b8:	29 f4       	brne	.+10     	; 0xc4 <main+0x58>
			out = in1 << in2;
  ba:	01 c0       	rjmp	.+2      	; 0xbe <main+0x52>
  bc:	88 0f       	add	r24, r24
  be:	4a 95       	dec	r20
  c0:	ea f7       	brpl	.-6      	; 0xbc <main+0x50>
  c2:	0c c0       	rjmp	.+24     	; 0xdc <main+0x70>
		} else if(control_bits == 6) {
  c4:	96 30       	cpi	r25, 0x06	; 6
  c6:	49 f4       	brne	.+18     	; 0xda <main+0x6e>
			out = in1 >> in2;
  c8:	28 2f       	mov	r18, r24
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	c9 01       	movw	r24, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <main+0x68>
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	4a 95       	dec	r20
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <main+0x64>
  d8:	01 c0       	rjmp	.+2      	; 0xdc <main+0x70>
	{
		control_bits = PINB & 0x07;

		in1 = PINA & 0x0f;
		in2 = (PINA & 0xf0) >> 4;
		out = 0;
  da:	80 e0       	ldi	r24, 0x00	; 0
			out = in1 << in2;
		} else if(control_bits == 6) {
			out = in1 >> in2;
		}

		out = out & 0x0f;
  dc:	8f 70       	andi	r24, 0x0F	; 15
		if(!out) {
  de:	09 f4       	brne	.+2      	; 0xe2 <main+0x76>
			out = out | 0x80;
  e0:	80 68       	ori	r24, 0x80	; 128
		}

		PORTD = out;
  e2:	82 bb       	out	0x12, r24	; 18
	DDRD = 0x8f;				// D[7] - Zero Flag | D[3:0] - Output

	uint8_t control_bits;
	uint8_t in1, in2, out;

	while (1)
  e4:	cb cf       	rjmp	.-106    	; 0x7c <main+0x10>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
